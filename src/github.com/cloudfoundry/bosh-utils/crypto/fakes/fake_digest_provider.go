// This file was generated by counterfeiter
package cryptofakes

import (
	"io"
	"sync"

	"github.com/cloudfoundry/bosh-utils/crypto"
)

type FakeDigestProvider struct {
	CreateFromStreamStub        func(reader io.Reader, algorithm crypto.DigestAlgorithm) (crypto.Digest, error)
	createFromStreamMutex       sync.RWMutex
	createFromStreamArgsForCall []struct {
		reader    io.Reader
		algorithm crypto.DigestAlgorithm
	}
	createFromStreamReturns struct {
		result1 crypto.Digest
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeDigestProvider) CreateFromStream(reader io.Reader, algorithm crypto.DigestAlgorithm) (crypto.Digest, error) {
	fake.createFromStreamMutex.Lock()
	fake.createFromStreamArgsForCall = append(fake.createFromStreamArgsForCall, struct {
		reader    io.Reader
		algorithm crypto.DigestAlgorithm
	}{reader, algorithm})
	fake.recordInvocation("CreateFromStream", []interface{}{reader, algorithm})
	fake.createFromStreamMutex.Unlock()
	if fake.CreateFromStreamStub != nil {
		return fake.CreateFromStreamStub(reader, algorithm)
	} else {
		return fake.createFromStreamReturns.result1, fake.createFromStreamReturns.result2
	}
}

func (fake *FakeDigestProvider) CreateFromStreamCallCount() int {
	fake.createFromStreamMutex.RLock()
	defer fake.createFromStreamMutex.RUnlock()
	return len(fake.createFromStreamArgsForCall)
}

func (fake *FakeDigestProvider) CreateFromStreamArgsForCall(i int) (io.Reader, crypto.DigestAlgorithm) {
	fake.createFromStreamMutex.RLock()
	defer fake.createFromStreamMutex.RUnlock()
	return fake.createFromStreamArgsForCall[i].reader, fake.createFromStreamArgsForCall[i].algorithm
}

func (fake *FakeDigestProvider) CreateFromStreamReturns(result1 crypto.Digest, result2 error) {
	fake.CreateFromStreamStub = nil
	fake.createFromStreamReturns = struct {
		result1 crypto.Digest
		result2 error
	}{result1, result2}
}

func (fake *FakeDigestProvider) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.createFromStreamMutex.RLock()
	defer fake.createFromStreamMutex.RUnlock()
	return fake.invocations
}

func (fake *FakeDigestProvider) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ crypto.DigestProvider = new(FakeDigestProvider)
